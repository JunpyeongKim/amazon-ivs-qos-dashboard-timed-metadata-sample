AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: IVS QoS Dashboard Backend - Includes sample player with event capture, ingest and processing implementation

Mappings:
    SourceCodeBucket:
      General:
        S3Bucket: 'BUCKET_NAME'
        LambdaUIDeploymentCodePrefix: 'qos/VERSION/lambda-functions/ui-deployment'
        PlayerSummaryCWCodePrefix: 'qos/VERSION/lambda-functions/playersummary-cw-function'
        QuizSummaryCWCodePrefix: 'qos/VERSION/lambda-functions/quizsummary-cw-function'
        AddPartitionFunctionCodePrefix: 'qos/VERSION/lambda-functions/add-partition-function'
        UICodePrefix: 'user-interfaces'

Parameters:
  PlaybackURL:
    Description: The IVS Playback URL that will be used in the Demo UI. Default value is a public test stream including Quiz timed-metadata integration.
    Type: String
    Default: https://fcc3ddae59ed.us-west-2.playback.live-video.net/api/video/v1/us-west-2.893648527354.channel.xhP3ExfcX8ON.m3u8

  DeployDemoUI:
    Type: String
    Description: Deploy the demo user interface for testing
    Default: true
    AllowedValues:
      - true
      - false

  PushToElasticSearch:
    Type: String
    Description: Enabling this along with specifying the ES Domain will push logs to ES
    Default: false
    AllowedValues:
      - true
      - false

  ElasticSearchDomainArn:
    Type: String
    Description: ElasticSearch Domain Arn

  ElasticSearchIndexName:
    Type: String
    Description: ElasticSearch Index Name
    Default: player_summary

  ElasticSearchIndexRotation:
    Type: String
    Description: Index Rotation Interval
    Default: NoRotation
    AllowedValues:
      - NoRotation
      - OneHour
      - OneDay
      - OneWeek
      - OneMonth

  # Types are deprecated in ES7.7, enable this if using older release of ES
  # ElasticSearchType:
  #   Type: String
  #   Description: ElasticSearch Type
  #   Default: FromFirehose

Conditions:
  DeployDemoUICondition: !Equals [!Ref DeployDemoUI, true]
  NoDeployDemoUICondition: !Equals [!Ref DeployDemoUI, false]
  USStandardRegion: !Equals [!Ref "AWS::Region", "us-east-1"]
  PushToElasticSearchCondition: !Equals [!Ref PushToElasticSearch, true]
  NoElasticSearchCondition: !Equals [!Ref PushToElasticSearch, false]

Resources:
  SourceBucket:
    Type: 'AWS::S3::Bucket'
    Condition: DeployDemoUICondition
    Properties:
      VersioningConfiguration:
        Status: Enabled
      CorsConfiguration:
        CorsRules:
          -
            AllowedHeaders:
              - '*'
            AllowedMethods:
              - 'GET'
              - 'PUT'
              - 'POST'
              - 'DELETE'
            AllowedOrigins:
              - '*'
            MaxAge: 3000
            ExposedHeaders:
              - 'ETAG'
              - 'x-amz-cf-id'

  SourceBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Condition: DeployDemoUICondition
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 's3:GetObject'
            Resource: !Sub 'arn:aws:s3:::${SourceBucket}/*'
            Effect: Allow
            Principal:
              AWS:
              - !Sub 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CFOriginAccessIdentity}'
      Bucket: !Ref SourceBucket

  CFOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Condition: DeployDemoUICondition
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub "${AWS::StackName} - QoS - OAI for player"

  CFDistributionWithDemoUI:
    Type: 'AWS::CloudFront::Distribution'
    Condition: DeployDemoUICondition
    Properties:
      DistributionConfig:
        Origins:
        - DomainName: !If [USStandardRegion, !Sub '${SourceBucket}.s3.amazonaws.com', !Sub '${SourceBucket}.s3-${AWS::Region}.amazonaws.com']
          Id: myS3Origin
          S3OriginConfig:
            OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${CFOriginAccessIdentity}
        - DomainName: !Sub ${EventIngestApi}.execute-api.${AWS::Region}.amazonaws.com
          Id: APIGWRegionalOrigin
          CustomOriginConfig:
            OriginProtocolPolicy: https-only
        Enabled: True
        Comment: !Sub "${AWS::StackName} - distribution for vod website"
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          TargetOriginId: myS3Origin
          ViewerProtocolPolicy: allow-all
          MinTTL: 300
          MaxTTL: 86400
          DefaultTTL: 86400
          SmoothStreaming: False
          Compress: True
          ForwardedValues:
            QueryString: False
            Cookies:
              Forward: 'none'
            Headers:
              - 'Access-Control-Request-Headers'
              - 'Access-Control-Request-Method'
              - 'Origin'
        CacheBehaviors:
          -
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
              - PUT
              - PATCH
              - POST
              - DELETE
            PathPattern: "/prod/*"
            TargetOriginId: APIGWRegionalOrigin
            ViewerProtocolPolicy: redirect-to-https
            ForwardedValues:
              QueryString: false
              Headers:
                - 'CloudFront-Viewer-Country-Name'
                - 'CloudFront-Viewer-City'
                - 'CloudFront-Viewer-Latitude'
                - 'CloudFront-Viewer-Longitude'
                - 'CloudFront-Is-SmartTV-Viewer'
                - 'CloudFront-Is-Tablet-Viewer'
                - 'CloudFront-Is-Mobile-Viewer'
                - 'CloudFront-Is-Desktop-Viewer'
        PriceClass: PriceClass_All
        ViewerCertificate:
          CloudFrontDefaultCertificate: True
        Logging:
          Bucket: !GetAtt PlayerLogsBucket.DomainName
          Prefix: 'access_logs/cloudfront/'

  CFDistributionWithoutDemoUI:
    Type: 'AWS::CloudFront::Distribution'
    Condition: NoDeployDemoUICondition
    Properties:
      DistributionConfig:
        Origins:
        - DomainName: !Sub ${EventIngestApi}.execute-api.${AWS::Region}.amazonaws.com
          Id: APIGWRegionalOrigin
          CustomOriginConfig:
            OriginProtocolPolicy: https-only
        Enabled: True
        Comment: !Sub "${AWS::StackName} - distribution for vod website"
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          TargetOriginId: APIGWRegionalOrigin
          ViewerProtocolPolicy: allow-all
          MinTTL: 300
          MaxTTL: 86400
          DefaultTTL: 86400
          SmoothStreaming: False
          Compress: True
          ForwardedValues:
            QueryString: False
            Cookies:
              Forward: 'none'
            Headers:
              - 'Access-Control-Request-Headers'
              - 'Access-Control-Request-Method'
              - 'Origin'
        CacheBehaviors:
          -
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
              - PUT
              - PATCH
              - POST
              - DELETE
            PathPattern: "/prod/*"
            TargetOriginId: APIGWRegionalOrigin
            ViewerProtocolPolicy: redirect-to-https
            ForwardedValues:
              QueryString: false
              Headers:
                - 'CloudFront-Viewer-Country-Name'
                - 'CloudFront-Viewer-City'
                - 'CloudFront-Viewer-Latitude'
                - 'CloudFront-Viewer-Longitude'
                - 'CloudFront-Is-SmartTV-Viewer'
                - 'CloudFront-Is-Tablet-Viewer'
                - 'CloudFront-Is-Mobile-Viewer'
                - 'CloudFront-Is-Desktop-Viewer'
        PriceClass: PriceClass_All
        ViewerCertificate:
          CloudFrontDefaultCertificate: True
        Logging:
          Bucket: !GetAtt PlayerLogsBucket.DomainName
          Prefix: 'access_logs/cloudfront/'

# Create an AWS Glue database
  GlueDatabase:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseInput:
        Name: !Sub '${AWS::StackName}_qos_db'

  PlayerLogsTable:
    Type: AWS::Glue::Table
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseName: !Ref GlueDatabase
      TableInput:
        Name: 'player_logs'
        TableType: EXTERNAL_TABLE
        Parameters: {
          "classification": "json"
        }
        PartitionKeys:
        - Name: year
          Type: string
        - Name: month
          Type: string
        - Name: day
          Type: string
        - Name: hour
          Type: string
        StorageDescriptor:
          OutputFormat: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
          Columns:
          - Name: metric_type
            Type: string
          - Name: user_id
            Type: string
          - Name: session_id
            Type: string
          - Name: client_platform
            Type: string
          - Name: channel_watched
            Type: string
          - Name: is_live
            Type: boolean
          - Name: error_count
            Type: int
          - Name: playing_time_ms
            Type: int
          - Name: buffering_time_ms
            Type: int
          - Name: buffering_count
            Type: int
          - Name: rendition_name
            Type: string
          - Name: rendition_height
            Type: int
          - Name: startup_latency_ms
            Type: int
          - Name: live_latency_ms
            Type: int
          - Name: event_time
            Type: timestamp
          - Name: question
            Type: string
          - Name: answer
            Type: string
          - Name: from_rendition_group
            Type: string
          - Name: to_rendition_group
            Type: string
          - Name: from_bitrate
            Type: int
          - Name: to_bitrate
            Type: int
          - Name: step_direction
            Type: string
          - Name: CloudFront-Is-Desktop-Viewer
            Type: string
          - Name: CloudFront-Is-Mobile-Viewer
            Type: string
          - Name: CloudFront-Is-SmartTV-Viewer
            Type: string
          - Name: CloudFront-Is-Tablet-Viewer
            Type: string
          - Name: CloudFront-Viewer-City
            Type: string
          - Name: CloudFront-Viewer-Country-Name
            Type: string
          - Name: CloudFront-Viewer-Latitude
            Type: string
          - Name: CloudFront-Viewer-Longitude
            Type: string
          - Name: es_location
            Type: string
          InputFormat: org.apache.hadoop.mapred.TextInputFormat
          Location: !Join ['',['s3://',!Ref PlayerLogsBucket,'/player_logs/']]
          SerdeInfo:
            SerializationLibrary: org.openx.data.jsonserde.JsonSerDe

  DeployFunctionRole:
    Type: 'AWS::IAM::Role'
    Condition: DeployDemoUICondition
    Properties:
      Path: /service-role/
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: CustomPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 's3:*'
                Resource: !Sub 'arn:aws:s3:::${SourceBucket}/*'
                Effect: Allow
              - Action:
                  - 's3:*'
                Resource: !Join ["/",
                [
                !Join [":",['arn','aws','s3','','',
                !Join ["-", [!FindInMap ["SourceCodeBucket", "General", "S3Bucket"],!Ref "AWS::Region"]]
                ]],
                '*']]
                Effect: Allow
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Action:
            - 'sts:AssumeRole'
          Effect: Allow
          Principal:
            Service:
              - lambda.amazonaws.com

  DeployFunction:
    Type: 'AWS::Serverless::Function'
    Condition: DeployDemoUICondition
    Properties:
      CodeUri: ../dist/deploy-function.zip
      MemorySize: 512
      Environment:
        Variables:
          SourceBucket: !Ref SourceBucket
          SourceFileBucket: !Join ["-", [!FindInMap ["SourceCodeBucket", "General", "S3Bucket"], !Ref "AWS::Region"]]
          SourceUIFilePath: !Join ["/", [!FindInMap ["SourceCodeBucket", "General", "LambdaUIDeploymentCodePrefix"], !FindInMap ["SourceCodeBucket", "General", "UICodePrefix"], "player-ui.zip"]]
          UIPrefix: 'ui'
          PlayerSummaryEndpoint: !If [DeployDemoUICondition,!Sub 'https://${CFDistributionWithDemoUI.DomainName}/prod/streams',!Sub 'https://${CFDistributionWithoutDemoUI.DomainName}/prod/streams']
          AnswerSummaryEndpoint: !If [DeployDemoUICondition,!Sub 'https://${CFDistributionWithDemoUI.DomainName}/prod/streams',!Sub 'https://${CFDistributionWithoutDemoUI.DomainName}/prod/streams']
          Playback_URL: !Ref PlaybackURL
      Handler: index.handler
      Role: !GetAtt DeployFunctionRole.Arn
      Timeout: 300
      Runtime: nodejs12.x

  DeployArtifacts:
    Type: 'Custom::DeployUI'
    Condition: DeployDemoUICondition
    Properties:
      DeliveryStreamName: !If [PushToElasticSearchCondition, !Ref PlayerLogsESDeliveryStream, !Ref PlayerLogsDeliveryStream]
      # PlayerSummaryEndpoint: !Sub 'https://${EventIngestApi}.execute-api.${AWS::Region}.amazonaws.com/prod/streams'
      # AnswerSummaryEndpoint: !Sub 'https://${EventIngestApi}.execute-api.${AWS::Region}.amazonaws.com/prod/streams'
      Region: !Sub ${AWS::Region}
      CloudFrontDomain: !If [DeployDemoUICondition,!Sub 'https://${CFDistributionWithDemoUI.DomainName}/',!Sub 'https://${CFDistributionWithoutDemoUI.DomainName}/']
      ServiceToken: !GetAtt DeployFunction.Arn

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-qos-lambda
      Path: /
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: 'QoS-Lambda-exec-policy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*:*
              - Effect: Allow
                Action:
                  - cloudwatch:PutInsightRule
                  - cloudwatch:PutMetricAlarm
                  - cloudwatch:PutMetricData
                Resource: "*"

  RecordValidationFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: ../dist/record-validation-function.zip
      MemorySize: 512
      Handler: function.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 300
      Runtime: python3.8
      Environment:
        Variables:
          BUCKET_VALIDATION_DEFS: !Ref PlayerLogsBucket
          BUCKET_VALIDATION_FILE: '/record/validations.json'

  EventBridgeHandlerFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: ../dist/event-bridge-handler-function.zip
      MemorySize: 128
      Handler: function.handler
      Role: !GetAtt EventBridgeHandlerFunctionRole.Arn
      Timeout: 60
      Runtime: python3.8
      EventInvokeConfig:
        DestinationConfig:
          OnSuccess:
            Type: EventBridge
            Destination: !Sub arn:aws:events:${AWS::Region}:${AWS::AccountId}:event-bus/default

  EventBridgeHandlerFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Path: /service-role/
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: CustomPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action: events:PutEvents
                Effect: Allow
                Resource: !Sub "arn:aws:events:${AWS::Region}:${AWS::AccountId}:event-bus/*"
              - Action:
                  - ssm:PutParameter
                  - ssm:DeleteParameter
                  - ssm:GetParameterHistory
                  - ssm:GetParametersByPath
                  - ssm:GetParameters
                  - ssm:GetParameter
                  - ssm:DeleteParameters
                Effect: Allow
                Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com

  PlayerSummaryCWFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: ../dist/playersummary-cw-function.zip
      MemorySize: 512
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 300
      Runtime: nodejs12.x
      Environment:
        Variables:
          DASHBOARD_NAME: !Sub ${AWS::StackName}-QoS

  QuizSummaryCWFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: ../dist/quizsummary-cw-function.zip
      MemorySize: 512
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 300
      Runtime: nodejs12.x
      Environment:
        Variables:
          DASHBOARD_NAME: !Sub ${AWS::StackName}-QoS

  AddPartitionFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Path: /service-role/
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: CustomPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action: athena:*
                Effect: Allow
                Resource: "*"
              - Action:
                  - glue:CreateDatabase
                  - glue:DeleteDatabase
                  - glue:GetDatabase
                  - glue:GetDatabases
                  - glue:UpdateDatabase
                  - glue:CreateTable
                  - glue:DeleteTable
                  - glue:BatchDeleteTable
                  - glue:UpdateTable
                  - glue:GetTable
                  - glue:GetTables
                  - glue:BatchCreatePartition
                  - glue:CreatePartition
                  - glue:DeletePartition
                  - glue:BatchDeletePartition
                  - glue:UpdatePartition
                  - glue:GetPartition
                  - glue:GetPartitions
                  - glue:BatchGetPartition
                Effect: Allow
                Resource: "*"
              - Action:
                  - s3:GetBucketLocation
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:ListBucketMultipartUploads
                  - s3:ListMultipartUploadParts
                  - s3:AbortMultipartUpload
                  - s3:CreateBucket
                  - s3:PutObject
                Effect: Allow
                Resource:
                  - arn:aws:s3:::aws-athena-query-results-*
                  - !Sub arn:aws:s3:::${PlayerLogsBucket}*
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - s3.amazonaws.com
                - glue.amazonaws.com
                - athena.amazonaws.com

  AddPartitionFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: ../dist/add-partition-function.zip
      MemorySize: 512
      Handler: index.handler
      Role: !GetAtt AddPartitionFunctionRole.Arn
      Timeout: 900
      Runtime: nodejs12.x
      Environment:
        Variables:
          ATHENA_RESULT_BUCKET: !Ref PlayerLogsBucket
          PLAYER_LOGS_BUCKET: !Ref PlayerLogsBucket
          PLAYER_LOGS_TABLE: !Join ['.', [!Ref GlueDatabase, !Ref PlayerLogsTable]]

  AddPartitionScheduledRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "ScheduledRule"
      ScheduleExpression: "rate(5 minutes)"
      State: "ENABLED"
      Targets:
        -
          Arn: !GetAtt AddPartitionFunction.Arn
          Id: "AddPartitionFunction"

  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AddPartitionFunction
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt AddPartitionScheduledRule.Arn

  PlayerLogsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-logs-${AWS::AccountId}-${AWS::Region}
      VersioningConfiguration:
        Status: Enabled

  KinesisFirehoseLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/ivsqos/${AWS::StackName}"
      RetentionInDays: 30

  KinesisFirehoseLogStream:
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName: !Ref KinesisFirehoseLogGroup
      LogStreamName: "playerlogstream"

  KinesisFirehoseESLogStream:
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName: !Ref KinesisFirehoseLogGroup
      LogStreamName: "elasticsearchDelivery"

  DeliveryRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service:
                - firehose.amazonaws.com
                - lambda.amazonaws.com
            Action: 'sts:AssumeRole'
            Condition:
              StringEquals:
                'sts:ExternalId': !Ref 'AWS::AccountId'

  DeliveryPolicy:
    Type: AWS::IAM::Policy
    Condition: NoElasticSearchCondition
    Properties:
      PolicyName: firehose_delivery_policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 's3:AbortMultipartUpload'
              - 's3:GetBucketLocation'
              - 's3:GetObject'
              - 's3:ListBucket'
              - 's3:ListBucketMultipartUploads'
              - 's3:PutObject'
            Resource:
                - !Sub 'arn:aws:s3:::${PlayerLogsBucket}'
                - !Sub 'arn:aws:s3:::${PlayerLogsBucket}/*'
          - Effect: Allow
            Action:
              - "logs:PutLogEvents"
            Resource:
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${KinesisFirehoseLogGroup}:log-stream:${KinesisFirehoseLogStream}"
      Roles:
        - !Ref DeliveryRole

  PlayerLogsDeliveryStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    Condition: NoElasticSearchCondition
    DependsOn:
      - PlayerLogsBucket
      - DeliveryPolicy
    Properties:
      DeliveryStreamType: DirectPut
      DeliveryStreamName: !Sub '${AWS::StackName}-playerlogs-stream'
      S3DestinationConfiguration:
        BucketARN: !Sub 'arn:aws:s3:::${PlayerLogsBucket}'
        BufferingHints:
          IntervalInSeconds: 60
          SizeInMBs: 1
        CompressionFormat: UNCOMPRESSED
        Prefix: player_logs/
        RoleARN: !GetAtt DeliveryRole.Arn
        CloudWatchLoggingOptions:
          Enabled: true
          LogGroupName: !Ref KinesisFirehoseLogGroup
          LogStreamName: !Ref KinesisFirehoseLogStream

  ESDeliveryPolicy:
    Type: AWS::IAM::Policy
    Condition: PushToElasticSearchCondition
    Properties:
      PolicyName: firehose_delivery_policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 's3:AbortMultipartUpload'
              - 's3:GetBucketLocation'
              - 's3:GetObject'
              - 's3:ListBucket'
              - 's3:ListBucketMultipartUploads'
              - 's3:PutObject'
            Resource:
                - !Sub 'arn:aws:s3:::${PlayerLogsBucket}'
                - !Sub 'arn:aws:s3:::${PlayerLogsBucket}/*'
          - Effect: Allow
            Action:
              - "es:DescribeElasticsearchDomain"
              - "es:DescribeElasticsearchDomains"
              - "es:DescribeElasticsearchDomainConfig"
              - "es:ESHttpPost"
              - "es:ESHttpPut"
            Resource:
              - !Ref ElasticSearchDomainArn
              - !Sub "${ElasticSearchDomainArn}/*"
          - Effect: Allow
            Action:
              - "es:ESHttpGet"
            Resource:
              - !Sub "${ElasticSearchDomainArn}/_all/_settings"
              - !Sub "${ElasticSearchDomainArn}/_cluster/stats"
              - !Sub "${ElasticSearchDomainArn}/index-name*/_mapping/type-name"
              - !Sub "${ElasticSearchDomainArn}/_nodes"
              - !Sub "${ElasticSearchDomainArn}/_nodes/stats"
              - !Sub "${ElasticSearchDomainArn}/_nodes/*/stats"
              - !Sub "${ElasticSearchDomainArn}/_stats"
              - !Sub "${ElasticSearchDomainArn}/index-name*/_stats"
          - Effect: Allow
            Action:
              - "logs:PutLogEvents"
            Resource:
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${KinesisFirehoseLogGroup}:log-stream:${KinesisFirehoseLogStream}"
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${KinesisFirehoseLogGroup}:log-stream:${KinesisFirehoseESLogStream}"
          - Effect: Allow
            Action:
              - "lambda:InvokeFunction"
              - "lambda:GetFunctionConfiguration"
            Resource:
              - !Sub "${RecordValidationFunction.Arn}*"
      Roles:
        - !Ref DeliveryRole

  PlayerLogsESDeliveryStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    Condition: PushToElasticSearchCondition
    DependsOn:
      - PlayerLogsBucket
      - ESDeliveryPolicy
    Properties:
      DeliveryStreamType: DirectPut
      DeliveryStreamName: !Sub '${AWS::StackName}-playerlogs-es-stream'
      ElasticsearchDestinationConfiguration:
        BufferingHints:
          IntervalInSeconds: 60
          SizeInMBs: 5
        CloudWatchLoggingOptions:
          Enabled: true
          LogGroupName: !Ref KinesisFirehoseLogGroup
          LogStreamName: !Ref KinesisFirehoseESLogStream
        DomainARN: !Ref ElasticSearchDomainArn
        IndexName: !Ref ElasticSearchIndexName
        IndexRotationPeriod: "NoRotation"
        #Types are deprecated in ES7.7, enable this if using older ES release
        #TypeName: !Ref ElasticSearchType
        ProcessingConfiguration:
          Enabled: true
          Processors:
            - Type: Lambda
              Parameters:
                - ParameterName: BufferSizeInMBs
                  ParameterValue: "3"
                - ParameterName: LambdaArn
                  ParameterValue: !GetAtt RecordValidationFunction.Arn
                - ParameterName: NumberOfRetries
                  ParameterValue: "1"
                - ParameterName: BufferIntervalInSeconds
                  ParameterValue: "60"
                - ParameterName: RoleArn
                  ParameterValue: !GetAtt DeliveryRole.Arn
        RetryOptions:
          DurationInSeconds: 60
        RoleARN: !GetAtt DeliveryRole.Arn
        S3BackupMode: "AllDocuments"
        S3Configuration:
          BucketARN: !Sub 'arn:aws:s3:::${PlayerLogsBucket}'
          BufferingHints:
            IntervalInSeconds: 60
            SizeInMBs: 50
          CompressionFormat: "UNCOMPRESSED"
          Prefix: player_logs/
          RoleARN: !GetAtt DeliveryRole.Arn
          CloudWatchLoggingOptions:
            Enabled: true
            LogGroupName: !Ref KinesisFirehoseLogGroup
            LogStreamName: !Ref KinesisFirehoseLogStream

  KinesisAnalyticsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: kinesisanalytics.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: ReadFirehoseInvokeLambda
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "firehose:DescribeDeliveryStream"
                  - "firehose:Get*"
                Resource: !If [PushToElasticSearchCondition, !GetAtt PlayerLogsESDeliveryStream.Arn, !GetAtt PlayerLogsDeliveryStream.Arn]
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                  - "lambda:GetFunctionConfiguration"
                Resource:
                  - !GetAtt PlayerSummaryCWFunction.Arn
                  - !GetAtt QuizSummaryCWFunction.Arn

  RealtimeAnalytics:
    Type: AWS::KinesisAnalytics::Application
    Properties:
      ApplicationName: !Sub '${AWS::StackName}-qos-realtimeapp1'
      ApplicationDescription: "QoS Realtime Application"
      ApplicationCode: "CREATE OR REPLACE STREAM PLAYER_STATS (METRIC_TYPE VARCHAR(20), METRIC_UNIT VARCHAR(15), CLIENT_PLATFORM VARCHAR(10), SUMMARY DOUBLE);\n
 CREATE OR REPLACE PUMP \"STREAM_PUMP4\" AS INSERT INTO \"PLAYER_STATS\" \n
 -- errors \n
 SELECT STREAM 'ERRORS', 'Count', \"client_platform\", SUM(\"error_count\") \n
 FROM     \"SOURCE_SQL_STREAM_001\" where \"metric_type\"='PLAYBACK_SUMMARY' \n
 GROUP BY \"client_platform\", \n
 STEP(\"SOURCE_SQL_STREAM_001\".ROWTIME BY INTERVAL '60' SECOND) \n
 UNION ALL \n
 -- average start up time in seconds \n
 SELECT STREAM 'STARTUP_TIME', 'Seconds', \"client_platform\", AVG(\"startup_latency_ms\")/1000 \n
 FROM     \"SOURCE_SQL_STREAM_001\"  where \"metric_type\"='PLAYBACK_SUMMARY' \n
 GROUP BY \"client_platform\", \n
 STEP(\"SOURCE_SQL_STREAM_001\".ROWTIME BY INTERVAL '60' SECOND) \n
  UNION ALL \n
-- buffer ratio \n
SELECT STREAM 'BUFFER_RATIO', 'Percent', \"client_platform\", AVG(\"buffering_time_ms\"/\"playing_time_ms\")*100 \n
 FROM     \"SOURCE_SQL_STREAM_001\" where \"metric_type\"='PLAYBACK_SUMMARY' \n
 GROUP BY \"client_platform\", \n
 STEP(\"SOURCE_SQL_STREAM_001\".ROWTIME BY INTERVAL '60' SECOND) \n
   UNION ALL \n
-- live latency \n
SELECT STREAM 'LIVE_LATENCY', 'Seconds', \"client_platform\", AVG(\"live_latency_ms\")/1000 \n
 FROM     \"SOURCE_SQL_STREAM_001\" where \"metric_type\"='PLAYBACK_SUMMARY' \n
 GROUP BY \"client_platform\", \n
 STEP(\"SOURCE_SQL_STREAM_001\".ROWTIME BY INTERVAL '60' SECOND);\n
-- concurrent users \n
CREATE OR REPLACE PUMP stream_pump AS \n
INSERT INTO PLAYER_STATS \n
SELECT STREAM 'CONCURRENCY', 'Count', \"client_platform\", COUNT(distinct_stream.\"user_id\") AS unique_count \n
  FROM ( \n
    SELECT STREAM DISTINCT rowtime as window_time, \n
      \"client_platform\", \n
      \"user_id\", \n
      STEP((SOURCE_SQL_STREAM_001.rowtime) BY INTERVAL '60' SECOND) \n
      FROM SOURCE_SQL_STREAM_001) as distinct_stream \n
  GROUP BY \"client_platform\", \n
      STEP((distinct_stream.window_time) BY INTERVAL '60' SECOND);"
      Inputs:
        - NamePrefix: "SOURCE_SQL_STREAM"
          InputSchema:
            RecordColumns:
             - Name: "metric_type"
               SqlType: "VARCHAR(16)"
               Mapping: "$.metric_type"
             - Name: "client_platform"
               SqlType: "VARCHAR(10)"
               Mapping: "$.client_platform"
             - Name: "channel_watched"
               SqlType: "VARCHAR(20)"
               Mapping: "$.channel_watched"
             - Name: "user_id"
               SqlType: "VARCHAR(64)"
               Mapping: "$.user_id"
             - Name: "session_id"
               SqlType: "VARCHAR(64)"
               Mapping: "$.session_id"
             - Name: "is_live"
               SqlType: "BOOLEAN"
               Mapping: "$.is_live"
             - Name: "error_count"
               SqlType: "INTEGER"
               Mapping: "$.error_count"
             - Name: "playing_time_ms"
               SqlType: "BIGINT"
               Mapping: "$.playing_time_ms"
             - Name: "buffering_time_ms"
               SqlType: "BIGINT"
               Mapping: "$.buffering_time_ms"
             - Name: "buffering_count"
               SqlType: "BIGINT"
               Mapping: "$.buffering_count"
             - Name: "rendition_name"
               SqlType: "VARCHAR(20)"
               Mapping: "$.rendition_name"
             - Name: "rendition_height"
               SqlType: "INTEGER"
               Mapping: "$.rendition_height"
             - Name: "startup_latency_ms"
               SqlType: "BIGINT"
               Mapping: "$.startup_latency_ms"
             - Name: "live_latency_ms"
               SqlType: "BIGINT"
               Mapping: "$.live_latency_ms"
             - Name: "question"
               SqlType: "VARCHAR(50)"
               Mapping: "$.question"
             - Name: "answer"
               SqlType: "VARCHAR(20)"
               Mapping: "$.answer"
             - Name: "from_rendition_group"
               SqlType: "VARCHAR(20)"
               Mapping: "$.from_rendition_group"
             - Name: "to_rendition_group"
               SqlType: "VARCHAR(20)"
               Mapping: "$.to_rendition_group"
             - Name: "from_bitrate"
               SqlType: "BIGINT"
               Mapping: "$.from_bitrate"
             - Name: "to_bitrate"
               SqlType: "BIGINT"
               Mapping: "$.to_bitrate"
             - Name: "step_direction"
               SqlType: "VARCHAR(5)"
               Mapping: "$.step_direction"
             - Name: "desktop_viewer"
               SqlType: "VARCHAR(6)"
               Mapping: "$.CloudFront-Is-Desktop-Viewer"
             - Name: "mobile_viewer"
               SqlType: "VARCHAR(6)"
               Mapping: "$.CloudFront-Is-Mobile-Viewer"
             - Name: "smarttv_viewer"
               SqlType: "VARCHAR(6)"
               Mapping: "$.CloudFront-Is-SmartTV-Viewer"
             - Name: "tablet_viewer"
               SqlType: "VARCHAR(6)"
               Mapping: "$.CloudFront-Is-Tablet-Viewer"
             - Name: "viewer_city"
               SqlType: "VARCHAR(50)"
               Mapping: "$.CloudFront-Viewer-City"
             - Name: "Viewer_country_name"
               SqlType: "VARCHAR(50)"
               Mapping: "$.CloudFront-Viewer-Country-Name"
             - Name: "viewer_latitude"
               SqlType: "VARCHAR(20)"
               Mapping: "$.CloudFront-Viewer-Latitude"
             - Name: "viewer_longitude"
               SqlType: "VARCHAR(20)"
               Mapping: "$.CloudFront-Viewer-Longitude"
             - Name: "es_location"
               SqlType: "VARCHAR(30)"
               Mapping: "$.es_location"
            RecordFormat:
              RecordFormatType: "JSON"
              MappingParameters:
                JSONMappingParameters:
                  RecordRowPath: "$"
          KinesisFirehoseInput:
            ResourceARN:
              !If [PushToElasticSearchCondition, !GetAtt PlayerLogsESDeliveryStream.Arn, !GetAtt PlayerLogsDeliveryStream.Arn]
            RoleARN: !GetAtt KinesisAnalyticsRole.Arn

  PlayerSummaryApplication:
    Type: AWS::KinesisAnalytics::ApplicationOutput
    Properties:
      ApplicationName: !Ref RealtimeAnalytics
      Output:
          Name: "PLAYER_STATS"
          DestinationSchema:
            RecordFormatType: "JSON"
          LambdaOutput:
            ResourceARN: !GetAtt PlayerSummaryCWFunction.Arn
            RoleARN: !GetAtt KinesisAnalyticsRole.Arn

  QuizSummaryApplication:
    Type: AWS::KinesisAnalytics::ApplicationOutput
    Properties:
      ApplicationName: !Ref RealtimeAnalytics
      Output:
          Name: "QUIZ_STATS"
          DestinationSchema:
            RecordFormatType: "JSON"
          LambdaOutput:
            ResourceARN: !GetAtt QuizSummaryCWFunction.Arn
            RoleARN: !GetAtt KinesisAnalyticsRole.Arn

  GlueJobRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Action:
            - 'sts:AssumeRole'
          Effect: Allow
          Principal:
            Service:
              - glue.amazonaws.com
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole"
        - "arn:aws:iam::aws:policy/AmazonS3FullAccess"

  EventIngestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: API GW Ingest point for events
      Name: !Sub ${AWS::StackName}-v1
      FailOnWarnings: true
      EndpointConfiguration:
        Types:
          - REGIONAL

  EventIngestApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - EventIngestApiPOST
      - EventIngestApiOPTIONS
    Properties:
      RestApiId: !Ref EventIngestApi

  EventIngestApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref EventIngestApi
      DeploymentId: !Ref EventIngestApiDeployment
      StageName: prod
      Variables:
        DeliveryStreamName : !If [PushToElasticSearchCondition,!Ref PlayerLogsESDeliveryStream,!Ref PlayerLogsDeliveryStream]

  EventIngestApiPOST:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        Type: AWS
        Credentials: !GetAtt EventIngestEndpointRole.Arn
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:firehose:action/PutRecordBatch"
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates: {"application/json": "{ }"}
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates:
          application/json: !Sub
          - |
            #set($non_string_attrs=["is_live","error_count","playing_time_ms","buffering_time_ms","buffering_count","rendition_height","startup_latency_ms","live_latency_ms","from_bitrate","to_bitrate","CloudFront-Is-SmartTV-Viewer","CloudFront-Is-Tablet-Viewer","CloudFront-Is-Mobile-Viewer","CloudFront-Is-Desktop-Viewer"])
            #set($header_params=["CloudFront-Viewer-Country-Name","CloudFront-Viewer-City","CloudFront-Viewer-Latitude","CloudFront-Viewer-Longitude","CloudFront-Is-SmartTV-Viewer","CloudFront-Is-Tablet-Viewer","CloudFront-Is-Mobile-Viewer","CloudFront-Is-Desktop-Viewer"])
            ## read the Data element from payload
            #set($inputjson = $input.path('$..Data'))
            #set($inputheaders = $input.params())
            ## set the Delivery Stream Kinesis Firehose stream name
            #set($output = "{ ""DeliveryStreamName"": ""$stageVariables.DeliveryStreamName"", ""Records"": [ ")
            ## for each payload event do the following
            #foreach($elem in $inputjson)
              #set($event = "{")
              ## read the attributes of the json object dynamically
              #foreach($attr in $elem.keySet())
                  ## check if this is string type attr or not. Accordingly use "" around values
                  #if($non_string_attrs.contains($attr))
                    #set($prop = """$attr"":$elem.get($attr),")
                  #else
                    #set($prop = """$attr"":""$elem.get($attr)"",")
                  #end
                  #set($event = "$event$prop")
              #end
              #foreach($attr in $header_params)
                  ## check if this is string type attr or not. Accordingly use "" around values
                  #if($inputheaders.contains($attr))
                      #if($non_string_attrs.contains($attr))
                        #set($prop = """$attr"":$input.params($attr),")
                      #else
                        #set($prop = """$attr"":""$input.params($attr)"",")
                      #end
                  #end
                  #set($event = "$event$prop")
              #end

              #set($longitude = $input.params('CloudFront-Viewer-Longitude'))
              #set($latitude = $input.params('CloudFront-Viewer-Latitude'))
              #if($longitude != "" && $latitude != "")
                #set($event = "$event""es_location"":""$latitude,$longitude"",")
              #end
              ## set the timestamp of event to be the time at which the APIGW received the event
              #set($event = "$event""event_time"":$context.requestTimeEpoch")
              #set($event = "$event}")
              ## encode to base64 for delivery
              #set($payload = "{""Data"":""$util.base64Encode($event)""}")
              #set($output = "$output$payload")
              #if($foreach.hasNext)
                  #set($output = "$output,")
              #end
              #end
              #set($output = "$output]}")
              $output
          #
          # - |
          #   #set($non_string_attrs=["is_live","error_count","playing_time_ms","buffering_time_ms","rendition_height","startup_latency_ms","live_latency_sec","from_bitrate","to_bitrate"])
          #   #set($header_params=["CloudFront-Viewer-Country-Name","CloudFront-Viewer-City","CloudFront-Viewer-Latitude","CloudFront-Viewer-Longitude","CloudFront-Is-SmartTV-Viewer","CloudFront-Is-Tablet-Viewer","CloudFront-Is-Mobile-Viewer","CloudFront-Is-Desktop-Viewer"])
          #   ## read the Data element from payload
          #   #set($inputjson = $input.path('$..Data'))
          #   #set($inputheaders = $input.params())
          #   ## set the Delivery Stream Kinesis Firehose stream name
          #   #set($output = "{ ""DeliveryStreamName"": ""$stageVariables.DeliveryStreamName"", ""Records"": [ ")
          #   ## for each payload event do the following
          #   #foreach($elem in $inputjson)
          #     #set($event = "{")
          #     ## read the attributes of the json object dynamically
          #     #foreach($attr in $elem.keySet())
          #         ## check if this is string type attr or not. Accordingly use "" around values
          #         #if($non_string_attrs.contains($attr))
          #           #set($prop = """$attr"":$elem.get($attr),")
          #         #else
          #           #set($prop = """$attr"":""$elem.get($attr)"",")
          #         #end
          #         #set($event = "$event$prop")
          #     #end
          #     #foreach($attr in $header_params)
          #         ## check if this is string type attr or not. Accordingly use "" around values
          #         #if($inputheaders.contains($attr))
          #             #if($non_string_attrs.contains($attr))
          #               #set($prop = """$attr"":$input.params($attr),")
          #             #else
          #               #set($prop = """$attr"":""$input.params($attr)"",")
          #             #end
          #         #end
          #         #set($event = "$event$prop")
          #     #end
          #     ## set the timestamp of event to be the time at which the APIGW received the event
          #     #set($event = "$event""event_time"":$context.requestTimeEpoch")
          #     #set($event = "$event}")
          #     ## encode to base64 for delivery
          #     #set($payload = "{""Data"":""$util.base64Encode($event)""}")
          #     #set($output = "$output$payload")
          #     #if($foreach.hasNext)
          #         #set($output = "$output,")
          #     #end
          #     #end
          #     #set($output = "$output]}")
          #     $output
          - {DeliveryStreamName: !If [PushToElasticSearchCondition,!Ref PlayerLogsESDeliveryStream,!Ref PlayerLogsDeliveryStream]}
      ResourceId: !Ref EventIngestApiResource
      RestApiId: !Ref EventIngestApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
          ResponseModels: { "application/json": "Empty" }

  EventIngestApiOPTIONS:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: |
            {"statusCode": 200}
      ResourceId: !Ref EventIngestApiResource
      RestApiId: !Ref EventIngestApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true
          ResponseModels: { "application/json": "Empty" }

  EventIngestApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref EventIngestApi
      ParentId: !GetAtt EventIngestApi.RootResourceId
      PathPart: streams

  EventIngestEndpointRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
            Effect: "Allow"
            Principal:
              Service:
                - "firehose.amazonaws.com"
                - "apigateway.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/service-role/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonKinesisFirehoseFullAccess"

  IVSQoSSummaryDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub "${AWS::StackName}-QoS-PlayerSummaryDashboard"
      DashboardBody: !Sub '{"widgets":[{"type":"metric","x":9,"y":3,"width":12,"height":6,"properties":{"metrics":[["${AWS::StackName}-QoS/PlayerSummary","BUFFER_RATIO","ClientPlatform","android",{"accountId":"${AWS::AccountId}"}],["...","ios",{"accountId":"${AWS::AccountId}"}],["...","web",{"accountId":"${AWS::AccountId}"}]],"view":"singleValue","stacked":false,"region":"${AWS::Region}","stat":"p95","period":60,"start":"-PT1H","end":"P0D","title":"Buffer Ratio - p95"}},{"type":"metric","x":0,"y":3,"width":12,"height":6,"properties":{"metrics":[["${AWS::StackName}-QoS/PlayerSummary","CONCURRENCY","ClientPlatform","android",{"accountId":"${AWS::AccountId}"}],["...","ios",{"accountId":"${AWS::AccountId}"}],["...","web",{"accountId":"${AWS::AccountId}"}]],"view":"singleValue","stacked":false,"region":"${AWS::Region}","stat":"Average","period":60,"start":"-PT1H","end":"P0D","title":"Concurrent Users - Avg"}},{"type":"metric","x":0,"y":9,"width":12,"height":6,"properties":{"metrics":[["${AWS::StackName}-QoS/PlayerSummary","ERRORS","ClientPlatform","android",{"accountId":"${AWS::AccountId}"}],["...","ios",{"accountId":"${AWS::AccountId}"}],["...","web",{"accountId":"${AWS::AccountId}"}]],"view":"singleValue","stacked":false,"region":"${AWS::Region}","start":"-PT1H","end":"P0D","title":"Errors","stat":"Sum","period":60}},{"type":"metric","x":0,"y":0,"width":18,"height":3,"properties":{"metrics":[["${AWS::StackName}-QoS/PlayerSummary","LIVE_LATENCY","ClientPlatform","android",{"accountId":"${AWS::AccountId}"}],["...","ios",{"accountId":"${AWS::AccountId}"}],["...","web",{"accountId":"${AWS::AccountId}"}]],"view":"singleValue","stacked":false,"region":"${AWS::Region}","start":"-PT1H","end":"P0D","title":"Live Latency","stat":"Average","period":60}},{"type":"metric","x":9,"y":9,"width":12,"height":6,"properties":{"view":"singleValue","stacked":false,"region":"${AWS::Region}","start":"-PT1H","end":"P0D","title":"Startup Time","stat":"Average","period":60,"metrics":[["${AWS::StackName}-QoS/PlayerSummary","STARTUP_TIME","ClientPlatform","android",{"accountId":"${AWS::AccountId}"}],["...","ios",{"accountId":"${AWS::AccountId}"}],["...","web",{"accountId":"${AWS::AccountId}"}]]}}]}'

  EventBridgeIngestApiPOST:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: AWS_IAM
      HttpMethod: POST
      Integration:
        Type: AWS
        Credentials: !GetAtt EventIngestEndpointRole.Arn
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:firehose:action/PutRecordBatch"
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates: {"application/json": "{ }"}
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates:
          application/json: !Sub
          - |
            #set($non_string_attrs=["duration","channel_count"])
            ## read the Data element from payload
            #set($inputjson = $input.path('$.detail.responsePayload'))
            ## set the Delivery Stream Kinesis Firehose stream name
            #set($output = "{ ""DeliveryStreamName"": ""$stageVariables.DeliveryStreamName"", ""Records"": [ ")
            ## for each payload event do the following
            #foreach($elem in $inputjson)
              #set($event = "{")
              ## read the attributes of the json object dynamically
              #foreach($attr in $elem.keySet())
                  ## check if this is string type attr or not. Accordingly use "" around values
                  #if($non_string_attrs.contains($attr))
                    #set($prop = """$attr"":$elem.get($attr),")
                  #else
                    #set($prop = """$attr"":""$elem.get($attr)"",")
                  #end
                  #set($event = "$event$prop")
              #end
              ## set the timestamp of event to be the time at which the APIGW received the event
              #set($event = "$event""event_time"":$context.requestTimeEpoch")
              #set($event = "$event}")
              ## encode to base64 for delivery
              #set($payload = "{""Data"":""$util.base64Encode($event)""}")
              #set($output = "$output$payload")
              #if($foreach.hasNext)
                  #set($output = "$output,")
              #end
              #end
              #set($output = "$output]}")
              $output
          - {DeliveryStreamName: !If [PushToElasticSearchCondition,!Ref PlayerLogsESDeliveryStream,!Ref PlayerLogsDeliveryStream]}
      ResourceId: !Ref EventBridgeIngestApiResource
      RestApiId: !Ref EventIngestApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
          ResponseModels: { "application/json": "Empty" }

  EventBridgeIngestApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref EventIngestApi
      ParentId: !GetAtt EventIngestApi.RootResourceId
      PathPart: eb-streams

  IVSQoSEventBridgeRuleRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Path: /service-role/
      Policies:
        - PolicyName: CustomPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - execute-api:Invoke
                  - execute-api:ManageConnections
                Effect: Allow
                Resource:
                  - !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${EventIngestApi}/prod/*
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com

  IVSQoSCronStatusUpdateHandlerRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "EventBridge Rule to periodically publish event metrics from SSM into event streams for reporting"
      State: "ENABLED"
      ScheduleExpression: rate(1 minute)
      Targets:
        -
          Arn: !GetAtt EventBridgeHandlerFunction.Arn
          Id: 'IVSQoSLambdaId'
          Input: |
            {"detail":{"event_name":"STATUS_UPDATE"}}

  IVSQoSCronStatusUpdateHandlerRulePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref EventBridgeHandlerFunction
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt EventBridgeHandlerFunction.Arn

  IVSQoSEventBridgeRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "EventBridge Rule to publish events on state changes from IVS"
      State: "ENABLED"
      EventPattern: { "source": [ "aws.ivs" ], "detail-type": [ "IVS Stream State Change","IVS Stream Health Change" ] }
      Targets:
        -
          Arn: !GetAtt EventBridgeHandlerFunction.Arn
          Id: 'IVSQoSLambdaId'

  IVSQoSLambdaRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Lambda Rule to publish events when EventBridgeLambda function sends data to destinations"
      State: "ENABLED"
      EventPattern: { "source": [ "lambda" ], "detail-type": [ "Lambda Function Invocation Result - Success" ] }
      Targets:
        -
          Arn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${EventIngestApi}/prod/POST/eb-streams"
          Id: 'IVSQoSAPIGWId'
          RoleArn: !GetAtt IVSQoSEventBridgeRuleRole.Arn

Outputs:
  PlayerURL:
    Value: !If [DeployDemoUICondition,!Sub 'https://${CFDistributionWithDemoUI.DomainName}/ui/index.html',!Sub 'https://${CFDistributionWithoutDemoUI.DomainName}/ui/index.html']
  PlayerCWDashboard:
    Value: !Sub
      - https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${DashboardName}
      - { DashboardName: !Ref IVSQoSSummaryDashboard}
  RealTimeAnalyticsApp:
    Value: !Sub
      - https://${AWS::Region}.console.aws.amazon.com/kinesisanalytics/home?region=${AWS::Region}#/wizard/hub?applicationName=${KinesisAnalyticsApp}
      - { KinesisAnalyticsApp: !Ref RealtimeAnalytics }
  sendQoSEventUrl:
    Value: !Sub https://${EventIngestApi}.execute-api.${AWS::Region}.amazonaws.com/prod/streams
  DeliveryStreamName:
    Value: !If [PushToElasticSearchCondition, !Ref PlayerLogsESDeliveryStream, !Ref PlayerLogsDeliveryStream ]
  PlaybackURL:
    Value: !Ref PlaybackURL
  DeliveryRoleArn:
    Value: !GetAtt DeliveryRole.Arn
